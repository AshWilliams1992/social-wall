{"version":3,"sources":["template/header.js","template/components/card.js","template/wall.js","serviceWorker.js","index.js"],"names":["Header","Card","props","cardRef","useRef","useEffect","gsap","to","current","duration","delay","index","autoAlpha","scale","ease","ref","className","src","url","alt","desc","Wall","useState","cards","setCards","load","setLoad","a","async","fetch","response","json","fetchCards","map","card","key","title","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAUeA,MARf,WACI,OACI,gCACI,6C,8BCqBGC,MAtBf,SAAcC,GAGV,IAAIC,EAAUC,iBAAO,MAOrB,OAJAC,qBAAU,WACNC,IAAKC,GAAGJ,EAAQK,QAAS,CAAEC,SAAU,IAAKC,MAAOR,EAAMS,MAAQ,EAAGC,UAAW,EAAGC,MAAO,EAAGC,KAAM,iBACjG,CAACZ,EAAMS,QAGN,yBAAKI,IAAKZ,EAASa,UAAU,QACzB,yBAAKA,UAAU,WACX,yBAAKC,IAAKf,EAAMgB,IAAKC,IAAI,UAE7B,yBAAKH,UAAU,QACVd,EAAMkB,QCsBRC,MAvCf,WAAgB,MAGcC,mBAAS,IAHvB,mBAGLC,EAHK,KAGEC,EAHF,OAIYF,oBAAS,GAJrB,mBAILG,EAJK,KAICC,EAJD,KAoBZ,OALArB,qBAAU,YARV,qBAAAsB,EAAAC,OAAA,kEAAAD,EAAA,MAC2BE,MAAM,2DADjC,cACUC,EADV,kBAAAH,EAAA,MAEuBG,EAASC,QAFhC,OAEUA,EAFV,OAIIP,EAASO,GACTL,GAAQ,GALZ,qCASIM,KACD,IAGCP,EAEI,0CAIA,8BACKF,EAAMU,KAAI,SAACC,EAAMvB,GAAP,OACP,kBAAC,EAAD,CAAMwB,IAAKxB,EACPA,MAAOA,EACPO,IAAKgB,EAAKhB,IACVE,KAAMc,EAAKE,a,MCtBfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,IAAMC,SAAP,KAAgB,kBAAC,EAAD,MAAU,kBAAC,EAAD,OAA2BC,SAASC,eAAe,YD2HvF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fb9df3e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <h1>Social Wall</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useRef } from 'react';\r\nimport gsap from 'gsap/all';\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    // Anim reference\r\n    let cardRef = useRef(null);\r\n\r\n    //- Init Animation\r\n    useEffect(() => {\r\n        gsap.to(cardRef.current, { duration: 1.2, delay: props.index / 5, autoAlpha: 1, scale: 1, ease: \"power4.out\" });\r\n    }, [props.index]);\r\n\r\n    return (\r\n        <div ref={cardRef} className=\"card\">\r\n            <div className=\"mainImg\">\r\n                <img src={props.url} alt=\"test\" />\r\n            </div>\r\n            <div className=\"desc\">\r\n                {props.desc}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\r\nimport Card from './components/card';\r\n\r\nfunction Wall() {\r\n\r\n    // Setting the useStates\r\n    const [cards, setCards] = useState([]);\r\n    const [load, setLoad] = useState(true);\r\n\r\n    // Fetching data from API\r\n    async function fetchCards() {\r\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/photos?_limit=100\");\r\n        const json = await response.json();\r\n\r\n        setCards(json);\r\n        setLoad(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCards();\r\n    }, []);\r\n\r\n    // Render\r\n    if (load) {\r\n        return (\r\n            <h3>Loading...</h3>\r\n        )\r\n    } else {\r\n        return (\r\n            <main>\r\n                {cards.map((card, index) =>\r\n                    <Card key={index}\r\n                        index={index}\r\n                        url={card.url}\r\n                        desc={card.title} />\r\n                )}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Wall;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Header from './template/header';\r\nimport Wall from './template/wall';\r\nimport './assets/scss/main.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<React.Fragment><Header /><Wall /></React.Fragment>, document.getElementById('content'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}